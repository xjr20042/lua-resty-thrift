--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


--require 'Thrift'
--require 'ThriftTest_ttypes'

local Thrift = require 'resty.thrift.thrift-lua.Thrift'
local TType = Thrift[1]
local TMessageType = Thrift[2]
local __TObject = Thrift[3]
local TException = Thrift[4]
local TApplicationException = Thrift[5]
local __TClient = Thrift[6]
local __TProcessor = Thrift[7]
local ttype = Thrift[8]
local terror = Thrift[9]

local ThriftTestClient
local ThriftTestIface
local ThriftTestProcessor
local testVoid_args
local testVoid_result
local testString_args
local testString_result

ThriftTestClient = __TObject.new(__TClient, {
  __type = 'ThriftTestClient'
})

function ThriftTestClient:testVoid()
  self:send_testVoid()
  self:recv_testVoid()
end

function ThriftTestClient:send_testVoid()
  self.oprot:writeMessageBegin('testVoid', TMessageType.CALL, self._seqid)
  local args = testVoid_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ThriftTestClient:recv_testVoid()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = testVoid_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ThriftTestClient:testString()
  self:send_testString()
  return self:recv_testString()
end

function ThriftTestClient:send_testString()
  self.oprot:writeMessageBegin('testString', TMessageType.CALL, self._seqid)
  local args = testString_args:new{}
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ThriftTestClient:recv_testString()
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = testString_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
ThriftTestIface = __TObject:new{
  __type = 'ThriftTestIface'
}


ThriftTestProcessor = __TObject.new(__TProcessor
, {
 __type = 'ThriftTestProcessor'
})

function ThriftTestProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function ThriftTestProcessor:process_testVoid(seqid, iprot, oprot, server_ctx)
  local args = testVoid_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = testVoid_result:new{}
  local status, res = pcall(self.handler.testVoid, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('testVoid', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ThriftTestProcessor:process_testString(seqid, iprot, oprot, server_ctx)
  local args = testString_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = testString_result:new{}
  local status, res = pcall(self.handler.testString, self.handler)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('testString', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

testVoid_args = __TObject:new{

}

function testVoid_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function testVoid_args:write(oprot)
  oprot:writeStructBegin('testVoid_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

testVoid_result = __TObject:new{

}

function testVoid_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function testVoid_result:write(oprot)
  oprot:writeStructBegin('testVoid_result')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

testString_args = __TObject:new{

}

function testString_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function testString_args:write(oprot)
  oprot:writeStructBegin('testString_args')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

testString_result = __TObject:new{
  success
}

function testString_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function testString_result:write(oprot)
  oprot:writeStructBegin('testString_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end
return {ThriftTestClient,ThriftTestIface,ThriftTestProcessor}
